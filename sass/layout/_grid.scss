/*------------------------------------*\
    #Grid
\*------------------------------------*/

$blisss-enable-grid: true;
$blisss-grid-type: "float";
$blisss-grid-gutter-base: 14px;
$blisss-grid-gutter: (
  "none": 0,
  "small": $blisss-grid-gutter-base / 2,
  "large": $blisss-grid-gutter-base * 2
);
$blisss-grid-align: (
  "top": start,
  "center": center,
  "bottom": end
);
$blisss-grid-container-large-width: 960px;
$blisss-grid-container-alias: "con";

/**
 * Container styles.
 *
 * this class set a defualt value for desktop web page.
 *
 * Example:
 * <div class="container"></div>
 * <div class="container container--full"></div>
 *
 * 1. center for screen.
 * 2. default set 100% width.
 * 3. set 960px for desktop web page.
 * 4. use `container--full` class to set 100% width.
 * 5. set padding offset headling margin.
 */
.container, .#{$blisss-grid-container-alias} {
  @extend %space-center; /* [1] */
  width: 100%; /* [2] */
  @include make-response(xx)  { max-width: $blisss-grid-container-large-width; }
  /* [3] */
  &--full { min-width: 100%; } /* [4] */
  padding: 1em; /* [5] */
}

.section { margin: 1em 0; }

/**
 * Rows styles.
 *
 * Set some required properties.
 *
 * Example:
 * <div class="layout">
 *   <div class="layout__item width--4"></div>
 *   <div class="layout__item width--4"></div>
 *   <div class="layout__item width--4"></div>
 * </div>
 *
 * 1. set lists styles to `none`.
 * 2. if use `float` layout, shuold clear the float.
 * 3. if use `flex` layout, set display property to `flex`.
 * 4. set default gutter for item.
 */
.layout {
  list-style: none; /* [1] */

  @if $blisss-grid-type == "float" {
    @extend %clearfix; /* [2] */
  } @else {
    @include flex() /* [3] */
  }

  margin-left: -$blisss-grid-gutter-base; /* [4] */
}

/**
 * Column styles.
 *
 * Set some required properties.
 *
 * 1. set vertical align to `top`.
 * 2. default set 100% width if don't has the `width` class.
 * 3. set the minimum height to 1px.
 * 4. if use `float` layout, set float to `left`.
 * 5. if use `inline-block`, set display to `inline-block`. maybe you need to
 *    clear the 'inline-block' space.
 * 6. if use `flex` layout, set flex-grow to 1 let width of items identical.
 * 7. set default gutter.
 */
.layout__item {
  vertical-align: top; /* [1] */
  width: 100%; /* [2] */
  min-height: 1px; /* [3] */

  @if $blisss-grid-type == "float" {
    float: left; /* [4] */
  } @else if $blisss-grid-type == "inline-block" {
    display: inline-block; /* [5] */
  } @else {
    @include flex-item(1); /* [6] */
  }

  padding-left: $blisss-grid-gutter-base; /* [7] */
}

/**
 * Gutter for grid.
 *
 * @Mixin
 *
 * @param {String} $namespace
 */
@mixin export-gutter($namespace) {
 @each $name, $value in $blisss-grid-gutter {
   .#{$namespace}.gutter--#{$name} {
     margin-left: -$value;
     > .#{$namespace}__item {
       padding-left: $value;
     }
   }
 }
}

/*
 * Gutter for grid.
 *
 * values: `none`, `small`, `large`.
 *
 * Example:
 * <div class="layout__item gutter--none"><div>
 * <div class="layout__item gutter--small"><div>
 */
@include export-gutter("layout");

/**
 * Vertical align for flex layout grid.
 *
 * @Mixin
 *
 * @param {String} - $namespace
 * @param {String} - $property
 */
@mixin export-align($namespace, $property) {
  .#{$namespace}.align {
    @each $name, $value in $blisss-grid-align {
      &--#{$name} { #{$property}: flex-position($value); }
    }
  }
}

/**
 * Vertical align for flex layout grid.
 *
 * you can set all item vertical align with `layout` class, and can set one item
 * with `layout__item` class. values: `top`, `center`, `bottom`, default `stretch`.
 *
 * Example:
 * <div class="layout align--top"></div>
 * <div class="layout__item align--center"></div>
 */
@if $blisss-grid-type == "flex" {
  @include export-align("layout", align-items);
  @include export-align("layout__item", align-self);
}
