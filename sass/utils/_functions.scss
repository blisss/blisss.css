@function map-prev-key($map, $key) {
  @if map-has-key($map, $key) {
    $keys-list: map-keys($map);
    $current-key-index: index($keys-list, $key);

    @if $current-key-index == 0 {
      @warn "the key in the map is the first, so return itself.";
      @return $key;
    } @else {
      $prev-key-index: $current-key-index - 1;
      @return nth($keys-list, $prev-key-index);
    }

  } @else {
    @warn "don't find the key in the map.";
    @return null;
  }
}

@function map-next-key($map, $key) {
  @if map-has-key($map, $key) {
    $keys-list: map-keys($map);
    $keys-list-len: length($keys-list);
    $current-key-index: index($keys-list, $key);

    @if $current-key-index == $keys-list-len {
      @warn "the key in the map is the last, so return itself.";
      @return $key;
    } @else {
      $next-key-index: $current-key-index + 1;
      @return nth($keys-list, $next-key-index);
    }

  } @else {
    @warn "don't find the key in the map.";
    @return null;
  }
}

@function direction($direction, $inversion: false) {
  $direction-list: top, right, bottom, left;
  @if $inversion == false {
    @return index($direction-list, $direction);
  } @else {
    @if $direction == top {
      @return 3;
    } @else if $direction == bottom {
      @return 1;
    } @else if $direction == left {
      @return 2;
    } @else {
      @return 4;
    }
  }
}

@function list-pop($list, $separator: auto) {
  $out: ();
  @for $i from 1 through length($list) {
    $out: join($out, nth($list, $i), $separator);
  }
  @return $out;
}

@function list-shift($list, $separator: auto) {
  $out: ();
  @for $i from 2 through length($list) {
    $out: join($out, nth($list, $i), $separator);
  }
  @return $out;
}
